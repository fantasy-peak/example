// generated by /home/qingfeng.nan/.xmake/packages/s/sqlpp11/0.61/954c070d3e81433da1f5ee354493f1fa/bin/sqlpp11-ddl2cpp ./test_sqlpp_table.sql TestSqlppTable TestProject
#ifndef TESTPROJECT_TESTSQLPPTABLE_H
#define TESTPROJECT_TESTSQLPPTABLE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace TestProject
{
  namespace TestSqlppTable_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Age
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "age";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T age;
            T& operator()() { return age; }
            const T& operator()() const { return age; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace TestSqlppTable_

  struct TestSqlppTable: sqlpp::table_t<TestSqlppTable,
               TestSqlppTable_::Name,
               TestSqlppTable_::Age>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "TestSqlppTable";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T TestSqlppTable;
        T& operator()() { return TestSqlppTable; }
        const T& operator()() const { return TestSqlppTable; }
      };
    };
  };
} // namespace TestProject
#endif
